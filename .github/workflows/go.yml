# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build and Test E-Commerce Application

on:
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    name: Build and Test Go Application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Go Source Code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    # Run build on the code
    - name: Build
      env:
          GOPROXY: "https://proxy.golang.org"
      run: go build -v cmd/main.go

    # Run test cases on the code
    - name: Run Test Cases
      run: make test

    # Generate Test Coverage of the Code
    - name: Generate Test Coverage
      run: |
        go test -v ./... -covermode=count -coverprofile=coverage.out
        go tool cover -func=coverage.out -o=coverage.out

    # Add Code Coverage Tag on repository
    - name: Go Coverage Badge  
      uses: tj-actions/coverage-badge-go@v2
      with:
        filename: coverage.out

    # Run go vet on the code
    - name: Check go vet
      run: go vet ./...

    # Run gofmt on the code
    - name: Check Formatting using go fmt
      run: |
            gofmt -s -l .
            if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then exit 1; fi

    # Run go lint on the code
    - name: Run go lint
      run: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin

            golangci-lint run
