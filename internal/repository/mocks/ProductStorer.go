// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/sagar23sj/go-ecommerce/internal/repository"
)

// ProductStorer is an autogenerated mock type for the ProductStorer type
type ProductStorer struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *ProductStorer) BeginTx(ctx context.Context) (*gorm.DB, error) {
	ret := _m.Called(ctx)

	var r0 *gorm.DB
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*gorm.DB, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: tx
func (_m *ProductStorer) CommitTx(tx *gorm.DB) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConn provides a mock function with given fields:
func (_m *ProductStorer) GetConn() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetProductByID provides a mock function with given fields: ctx, tx, productID
func (_m *ProductStorer) GetProductByID(ctx context.Context, tx *gorm.DB, productID int64) (repository.Product, error) {
	ret := _m.Called(ctx, tx, productID)

	var r0 repository.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int64) (repository.Product, error)); ok {
		return rf(ctx, tx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int64) repository.Product); ok {
		r0 = rf(ctx, tx, productID)
	} else {
		r0 = ret.Get(0).(repository.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, int64) error); ok {
		r1 = rf(ctx, tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleTransaction provides a mock function with given fields: ctx, tx, incomingErr
func (_m *ProductStorer) HandleTransaction(ctx context.Context, tx *gorm.DB, incomingErr error) error {
	ret := _m.Called(ctx, tx, incomingErr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, error) error); ok {
		r0 = rf(ctx, tx, incomingErr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListProducts provides a mock function with given fields: ctx, tx
func (_m *ProductStorer) ListProducts(ctx context.Context, tx *gorm.DB) ([]repository.Product, error) {
	ret := _m.Called(ctx, tx)

	var r0 []repository.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) ([]repository.Product, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) []repository.Product); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackTx provides a mock function with given fields: tx
func (_m *ProductStorer) RollbackTx(tx *gorm.DB) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductQuantity provides a mock function with given fields: ctx, tx, productsQuantityMap
func (_m *ProductStorer) UpdateProductQuantity(ctx context.Context, tx *gorm.DB, productsQuantityMap map[int64]int64) error {
	ret := _m.Called(ctx, tx, productsQuantityMap)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, map[int64]int64) error); ok {
		r0 = rf(ctx, tx, productsQuantityMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProductStorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductStorer creates a new instance of ProductStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductStorer(t mockConstructorTestingTNewProductStorer) *ProductStorer {
	mock := &ProductStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
