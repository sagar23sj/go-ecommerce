// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/sagar23sj/go-ecommerce/internal/pkg/dto"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetProductByID provides a mock function with given fields: ctx, tx, productID
func (_m *Service) GetProductByID(ctx context.Context, tx *gorm.DB, productID int64) (dto.Product, error) {
	ret := _m.Called(ctx, tx, productID)

	var r0 dto.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int64) (dto.Product, error)); ok {
		return rf(ctx, tx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int64) dto.Product); ok {
		r0 = rf(ctx, tx, productID)
	} else {
		r0 = ret.Get(0).(dto.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, int64) error); ok {
		r1 = rf(ctx, tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx
func (_m *Service) ListProducts(ctx context.Context) ([]dto.Product, error) {
	ret := _m.Called(ctx)

	var r0 []dto.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductQuantity provides a mock function with given fields: ctx, tx, productsQuantityMap
func (_m *Service) UpdateProductQuantity(ctx context.Context, tx *gorm.DB, productsQuantityMap map[int64]int64) error {
	ret := _m.Called(ctx, tx, productsQuantityMap)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, map[int64]int64) error); ok {
		r0 = rf(ctx, tx, productsQuantityMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
