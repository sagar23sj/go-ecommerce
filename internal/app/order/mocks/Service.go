// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/sagar23sj/go-ecommerce/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, orderDetails
func (_m *Service) CreateOrder(ctx context.Context, orderDetails dto.CreateOrderRequest) (dto.Order, error) {
	ret := _m.Called(ctx, orderDetails)

	var r0 dto.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateOrderRequest) (dto.Order, error)); ok {
		return rf(ctx, orderDetails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateOrderRequest) dto.Order); ok {
		r0 = rf(ctx, orderDetails)
	} else {
		r0 = ret.Get(0).(dto.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateOrderRequest) error); ok {
		r1 = rf(ctx, orderDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderDetailsByID provides a mock function with given fields: ctx, orderID
func (_m *Service) GetOrderDetailsByID(ctx context.Context, orderID int64) (dto.Order, error) {
	ret := _m.Called(ctx, orderID)

	var r0 dto.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dto.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(dto.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrders provides a mock function with given fields: ctx
func (_m *Service) ListOrders(ctx context.Context) ([]dto.Order, error) {
	ret := _m.Called(ctx)

	var r0 []dto.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: ctx, orderID, status
func (_m *Service) UpdateOrderStatus(ctx context.Context, orderID int64, status string) (dto.Order, error) {
	ret := _m.Called(ctx, orderID, status)

	var r0 dto.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (dto.Order, error)); ok {
		return rf(ctx, orderID, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) dto.Order); ok {
		r0 = rf(ctx, orderID, status)
	} else {
		r0 = ret.Get(0).(dto.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, orderID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
